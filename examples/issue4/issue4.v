(* generated by Ott 0.32, locally-nameless lngen from: issue4.ott *)
Require Import Metalib.Metatheory.
(** syntax *)
Definition effvar : Set := var.
Definition expvar : Set := var.
Definition typvar : Set := var.

Inductive eff : Set := 
 | eff_top : eff
 | eff_var_b (_:nat)
 | eff_var_f (r:effvar)
 | eff_dummy (R1:eff) (R2:eff).

Inductive typ : Set := 
 | typ_base : typ
 | typ_var_b (_:nat)
 | typ_var_f (X:typvar)
 | typ_eff (R:eff) (T:typ).

Inductive exp : Set := 
 | exp_var_b (_:nat)
 | exp_var_f (x:expvar)
 | exp_abs (T:typ) (e:exp)
 | exp_rabs (e:exp)
 | exp_tabs (e:exp).

(* EXPERIMENTAL *)
(** auxiliary functions on the new list types *)
(** library functions *)
(** subrules *)
(** arities *)
(** opening up abstractions *)
Fixpoint open_eff_wrt_eff_rec (k:nat) (R_5:eff) (R__6:eff) {struct R__6}: eff :=
  match R__6 with
  | eff_top => eff_top 
  | (eff_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => eff_var_b nat
        | inleft (right _) => R_5
        | inright _ => eff_var_b (nat - 1)
      end
  | (eff_var_f r) => eff_var_f r
  | (eff_dummy R1 R2) => eff_dummy (open_eff_wrt_eff_rec k R_5 R1) (open_eff_wrt_eff_rec k R_5 R2)
end.

Fixpoint open_typ_wrt_eff_rec (k:nat) (R5:eff) (T5:typ) {struct T5}: typ :=
  match T5 with
  | typ_base => typ_base 
  | (typ_var_b nat) => typ_var_b nat
  | (typ_var_f X) => typ_var_f X
  | (typ_eff R T) => typ_eff (open_eff_wrt_eff_rec k R5 R) (open_typ_wrt_eff_rec k R5 T)
end.

Fixpoint open_typ_wrt_typ_rec (k:nat) (T5:typ) (T_6:typ) {struct T_6}: typ :=
  match T_6 with
  | typ_base => typ_base 
  | (typ_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => typ_var_b nat
        | inleft (right _) => T5
        | inright _ => typ_var_b (nat - 1)
      end
  | (typ_var_f X) => typ_var_f X
  | (typ_eff R T) => typ_eff R (open_typ_wrt_typ_rec k T5 T)
end.

Fixpoint open_exp_wrt_eff_rec (k:nat) (R5:eff) (e5:exp) {struct e5}: exp :=
  match e5 with
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => exp_var_f x
  | (exp_abs T e) => exp_abs (open_typ_wrt_eff_rec k R5 T) (open_exp_wrt_eff_rec k R5 e)
  | (exp_rabs e) => exp_rabs (open_exp_wrt_eff_rec (S k) R5 e)
  | (exp_tabs e) => exp_tabs (open_exp_wrt_eff_rec k R5 e)
end.

Fixpoint open_exp_wrt_exp_rec (k:nat) (e5:exp) (e_6:exp) {struct e_6}: exp :=
  match e_6 with
  | (exp_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => exp_var_b nat
        | inleft (right _) => e5
        | inright _ => exp_var_b (nat - 1)
      end
  | (exp_var_f x) => exp_var_f x
  | (exp_abs T e) => exp_abs T (open_exp_wrt_exp_rec (S k) e5 e)
  | (exp_rabs e) => exp_rabs (open_exp_wrt_exp_rec k e5 e)
  | (exp_tabs e) => exp_tabs (open_exp_wrt_exp_rec k e5 e)
end.

Fixpoint open_exp_wrt_typ_rec (k:nat) (T5:typ) (e5:exp) {struct e5}: exp :=
  match e5 with
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => exp_var_f x
  | (exp_abs T e) => exp_abs (open_typ_wrt_typ_rec k T5 T) (open_exp_wrt_typ_rec k T5 e)
  | (exp_rabs e) => exp_rabs (open_exp_wrt_typ_rec k T5 e)
  | (exp_tabs e) => exp_tabs (open_exp_wrt_typ_rec (S k) T5 e)
end.

Definition open_exp_wrt_eff R5 e5 := open_exp_wrt_eff_rec 0 e5 R5.

Definition open_typ_wrt_typ T5 T_6 := open_typ_wrt_typ_rec 0 T_6 T5.

Definition open_exp_wrt_exp e5 e_6 := open_exp_wrt_exp_rec 0 e_6 e5.

Definition open_exp_wrt_typ T5 e5 := open_exp_wrt_typ_rec 0 e5 T5.

Definition open_typ_wrt_eff R5 T5 := open_typ_wrt_eff_rec 0 T5 R5.

Definition open_eff_wrt_eff R_5 R__6 := open_eff_wrt_eff_rec 0 R__6 R_5.

(** closing up abstractions *)
Fixpoint close_eff_wrt_eff_rec (k:nat) (R_5:var) (R__6:eff) {struct R__6}: eff :=
  match R__6 with
  | eff_top => eff_top 
  | (eff_var_b nat) => 
       if (lt_dec nat k) 
         then eff_var_b nat
         else eff_var_f R_5

  | (eff_var_f r) => if (R_5 === r) then (eff_var_b k) else (eff_var_f r)
  | (eff_dummy R1 R2) => eff_dummy (close_eff_wrt_eff_rec k R_5 R1) (close_eff_wrt_eff_rec k R_5 R2)
end.

Fixpoint close_typ_wrt_eff_rec (k:nat) (R5:var) (T5:typ) {struct T5}: typ :=
  match T5 with
  | typ_base => typ_base 
  | (typ_var_b nat) => typ_var_b nat
  | (typ_var_f X) => typ_var_f X
  | (typ_eff R T) => typ_eff (close_eff_wrt_eff_rec k R5 R) (close_typ_wrt_eff_rec k R5 T)
end.

Fixpoint close_typ_wrt_typ_rec (k:nat) (T5:var) (T_6:typ) {struct T_6}: typ :=
  match T_6 with
  | typ_base => typ_base 
  | (typ_var_b nat) => 
       if (lt_dec nat k) 
         then typ_var_b nat
         else typ_var_f T5

  | (typ_var_f X) => if (T5 === X) then (typ_var_b k) else (typ_var_f X)
  | (typ_eff R T) => typ_eff R (close_typ_wrt_typ_rec k T5 T)
end.

Fixpoint close_exp_wrt_eff_rec (k:nat) (R5:var) (e5:exp) {struct e5}: exp :=
  match e5 with
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => exp_var_f x
  | (exp_abs T e) => exp_abs (close_typ_wrt_eff_rec k R5 T) (close_exp_wrt_eff_rec k R5 e)
  | (exp_rabs e) => exp_rabs (close_exp_wrt_eff_rec (S k) R5 e)
  | (exp_tabs e) => exp_tabs (close_exp_wrt_eff_rec k R5 e)
end.

Fixpoint close_exp_wrt_exp_rec (k:nat) (e5:var) (e_6:exp) {struct e_6}: exp :=
  match e_6 with
  | (exp_var_b nat) => 
       if (lt_dec nat k) 
         then exp_var_b nat
         else exp_var_f e5

  | (exp_var_f x) => if (e5 === x) then (exp_var_b k) else (exp_var_f x)
  | (exp_abs T e) => exp_abs T (close_exp_wrt_exp_rec (S k) e5 e)
  | (exp_rabs e) => exp_rabs (close_exp_wrt_exp_rec k e5 e)
  | (exp_tabs e) => exp_tabs (close_exp_wrt_exp_rec k e5 e)
end.

Fixpoint close_exp_wrt_typ_rec (k:nat) (T5:var) (e5:exp) {struct e5}: exp :=
  match e5 with
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => exp_var_f x
  | (exp_abs T e) => exp_abs (close_typ_wrt_typ_rec k T5 T) (close_exp_wrt_typ_rec k T5 e)
  | (exp_rabs e) => exp_rabs (close_exp_wrt_typ_rec k T5 e)
  | (exp_tabs e) => exp_tabs (close_exp_wrt_typ_rec (S k) T5 e)
end.

Definition close_exp_wrt_eff e5 R5 := close_exp_wrt_eff_rec 0 e5 R5.

Definition close_typ_wrt_typ T_6 T5 := close_typ_wrt_typ_rec 0 T_6 T5.

Definition close_exp_wrt_exp e_6 e5 := close_exp_wrt_exp_rec 0 e_6 e5.

Definition close_exp_wrt_typ e5 T5 := close_exp_wrt_typ_rec 0 e5 T5.

Definition close_typ_wrt_eff T5 R5 := close_typ_wrt_eff_rec 0 T5 R5.

Definition close_eff_wrt_eff R__6 R_5 := close_eff_wrt_eff_rec 0 R__6 R_5.

(** terms are locally-closed pre-terms *)
(** definitions *)

(* defns LC_eff *)
Inductive lc_eff : eff -> Prop :=    (* defn lc_eff *)
 | lc_eff_top : 
     (lc_eff eff_top)
 | lc_eff_var_f : forall (r:effvar),
     (lc_eff (eff_var_f r))
 | lc_eff_dummy : forall (R1 R2:eff),
     (lc_eff R1) ->
     (lc_eff R2) ->
     (lc_eff (eff_dummy R1 R2)).

(* defns LC_typ *)
Inductive lc_typ : typ -> Prop :=    (* defn lc_typ *)
 | lc_typ_base : 
     (lc_typ typ_base)
 | lc_typ_var_f : forall (X:typvar),
     (lc_typ (typ_var_f X))
 | lc_typ_eff : forall (R:eff) (T:typ),
     (lc_eff R) ->
     (lc_typ T) ->
     (lc_typ (typ_eff R T)).

(* defns LC_exp *)
Inductive lc_exp : exp -> Prop :=    (* defn lc_exp *)
 | lc_exp_var_f : forall (x:expvar),
     (lc_exp (exp_var_f x))
 | lc_exp_abs : forall (T:typ) (e:exp),
     (lc_typ T) ->
      ( forall x , lc_exp  ( open_exp_wrt_exp e (exp_var_f x) )  )  ->
     (lc_exp (exp_abs T e))
 | lc_exp_rabs : forall (e:exp),
      ( forall r , lc_exp  ( open_exp_wrt_eff e (eff_var_f r) )  )  ->
     (lc_exp (exp_rabs e))
 | lc_exp_tabs : forall (e:exp),
      ( forall X , lc_exp  ( open_exp_wrt_typ e (typ_var_f X) )  )  ->
     (lc_exp (exp_tabs e)).
(** free variables *)
Fixpoint fv_rr_eff (R_5:eff) : vars :=
  match R_5 with
  | eff_top => {}
  | (eff_var_b nat) => {}
  | (eff_var_f r) => {{r}}
  | (eff_dummy R1 R2) => (fv_rr_eff R1) \u (fv_rr_eff R2)
end.

Fixpoint fv_tt_typ (T5:typ) : vars :=
  match T5 with
  | typ_base => {}
  | (typ_var_b nat) => {}
  | (typ_var_f X) => {{X}}
  | (typ_eff R T) => (fv_tt_typ T)
end.

Fixpoint fv_rr_typ (T5:typ) : vars :=
  match T5 with
  | typ_base => {}
  | (typ_var_b nat) => {}
  | (typ_var_f X) => {}
  | (typ_eff R T) => (fv_rr_eff R) \u (fv_rr_typ T)
end.

Fixpoint fv_tt_exp (e5:exp) : vars :=
  match e5 with
  | (exp_var_b nat) => {}
  | (exp_var_f x) => {}
  | (exp_abs T e) => (fv_tt_typ T) \u (fv_tt_exp e)
  | (exp_rabs e) => (fv_tt_exp e)
  | (exp_tabs e) => (fv_tt_exp e)
end.

Fixpoint fv_ee_exp (e5:exp) : vars :=
  match e5 with
  | (exp_var_b nat) => {}
  | (exp_var_f x) => {{x}}
  | (exp_abs T e) => (fv_ee_exp e)
  | (exp_rabs e) => (fv_ee_exp e)
  | (exp_tabs e) => (fv_ee_exp e)
end.

Fixpoint fv_rr_exp (e5:exp) : vars :=
  match e5 with
  | (exp_var_b nat) => {}
  | (exp_var_f x) => {}
  | (exp_abs T e) => (fv_rr_typ T) \u (fv_rr_exp e)
  | (exp_rabs e) => (fv_rr_exp e)
  | (exp_tabs e) => (fv_rr_exp e)
end.

(** substitutions *)
Fixpoint subst_rr_eff (R_5:eff) (r5:effvar) (R__6:eff) {struct R__6} : eff :=
  match R__6 with
  | eff_top => eff_top 
  | (eff_var_b nat) => eff_var_b nat
  | (eff_var_f r) => (if eq_var r r5 then R_5 else (eff_var_f r))
  | (eff_dummy R1 R2) => eff_dummy (subst_rr_eff R_5 r5 R1) (subst_rr_eff R_5 r5 R2)
end.

Fixpoint subst_tt_typ (T5:typ) (X5:typvar) (T_6:typ) {struct T_6} : typ :=
  match T_6 with
  | typ_base => typ_base 
  | (typ_var_b nat) => typ_var_b nat
  | (typ_var_f X) => (if eq_var X X5 then T5 else (typ_var_f X))
  | (typ_eff R T) => typ_eff R (subst_tt_typ T5 X5 T)
end.

Fixpoint subst_rr_typ (R5:eff) (r5:effvar) (T5:typ) {struct T5} : typ :=
  match T5 with
  | typ_base => typ_base 
  | (typ_var_b nat) => typ_var_b nat
  | (typ_var_f X) => typ_var_f X
  | (typ_eff R T) => typ_eff (subst_rr_eff R5 r5 R) (subst_rr_typ R5 r5 T)
end.

Fixpoint subst_tt_exp (T5:typ) (X5:typvar) (e5:exp) {struct e5} : exp :=
  match e5 with
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => exp_var_f x
  | (exp_abs T e) => exp_abs (subst_tt_typ T5 X5 T) (subst_tt_exp T5 X5 e)
  | (exp_rabs e) => exp_rabs (subst_tt_exp T5 X5 e)
  | (exp_tabs e) => exp_tabs (subst_tt_exp T5 X5 e)
end.

Fixpoint subst_ee_exp (e5:exp) (x5:expvar) (e_6:exp) {struct e_6} : exp :=
  match e_6 with
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => (if eq_var x x5 then e5 else (exp_var_f x))
  | (exp_abs T e) => exp_abs T (subst_ee_exp e5 x5 e)
  | (exp_rabs e) => exp_rabs (subst_ee_exp e5 x5 e)
  | (exp_tabs e) => exp_tabs (subst_ee_exp e5 x5 e)
end.

Fixpoint subst_rr_exp (R5:eff) (r5:effvar) (e5:exp) {struct e5} : exp :=
  match e5 with
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => exp_var_f x
  | (exp_abs T e) => exp_abs (subst_rr_typ R5 r5 T) (subst_rr_exp R5 r5 e)
  | (exp_rabs e) => exp_rabs (subst_rr_exp R5 r5 e)
  | (exp_tabs e) => exp_tabs (subst_rr_exp R5 r5 e)
end.


(** definitions *)


(** infrastructure *)
#[export] Hint Constructors lc_eff lc_typ lc_exp : core.


